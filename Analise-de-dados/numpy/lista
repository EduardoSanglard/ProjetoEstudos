⚫1- Importe numpy como ‘np’ e imprima o número da versão.

⚫2- Crie uma matriz 1D com números de 0 a 9
Saída desejada:
array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

⚫3- Crie uma matriz booleana numpy 3×3 com ‘True’
Saída desejada:
array([[ True, True, True],
[ True, True, True],
[ True, True, True]], dtype=bool)

⚫4- Extraia todos os números ímpares de ‘arr’
arr = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
Saída desejada: array([1, 3, 5, 7, 9])

⚫5- Substitua todos os números ímpares arr por -1
arr = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
Saída desejada: array([ 0, -1, 2, -1, 4, -1, 6, -1, 8, -1])

➡ Médio
⚫1- Substitua todos os números ímpares em arr com -1 sem alterar arr
arr = np.array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
Saída desejada: array([ 0, -1, 2, -1, 4, -1, 6, -1, 8, -1])
arr == array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])

⚫2- Converta uma matriz 1D para uma matriz 2D com 2 linhas:
np.arange(10)
array([ 0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
Saída desejada:
array([[0, 1, 2, 3, 4],
[5, 6, 7, 8, 9]])

⚫3- Empilhe matrizes verticalmente:
a = np.arange(10).reshape(2,-1)
b = np.repeat(1, 10).reshape(2,-1)
Saída desejada:
array([[0, 1, 2, 3, 4],
[5, 6, 7, 8, 9],
[1, 1, 1, 1, 1],
[1, 1, 1, 1, 1]])

⚫4- Empilhe as matrizes horizontalmente:
a = np.arange(10).reshape(2,-1)
b = np.repeat(1, 10).reshape(2,-1)
Saída desejada:
array([[0, 1, 2, 3, 4, 1, 1, 1, 1, 1],
[5, 6, 7, 8, 9, 1, 1, 1, 1, 1]])

⚫5- Crie o seguinte padrão sem codificação, usando apenas funções numpy e a matriz de entrada abaixo ‘a’.
a = np.array([1,2,3])
Saída desejada: array([1, 1, 1, 2, 2, 2, 3, 3, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3])

➡ Difícil
⚫1- Calcule a pontuação softmax de ‘sepal length’:

url = ‘https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data’
sepallength = np.genfromtxt(url, delimiter=’,’, dtype=’float’, usecols=[0])

⚫2- Filtre as linhas de iris_2d que possuem petallength (coluna 3) > 1.5 e sepallength (coluna 1) < 5.0

url = ‘https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data’
iris_2d = np.genfromtxt(url, delimiter=’,’, dtype=’float’, usecols=[0,1,2,3])

⚫3- Selecione as linhas de iris_2d que não têm nenhum valor ‘nan’

url = ‘https://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data’
iris_2d = np.genfromtxt(url, delimiter=’,’, dtype=’float’, usecols=[0,1,2,3])

➡ Muito difícil
⚫1- Calcule as contagens de valores únicos na linha.

np.random.seed(100)
arr = np.random.randint(1,11,size=(6, 10))
print(arr)
array([[ 9, 9, 4, 8, 8, 1, 5, 3, 6, 3],
[ 3, 3, 2, 1, 9, 5, 1, 10, 7, 3],
[ 5, 2, 6, 4, 5, 5, 4, 8, 2, 2],
[ 8, 8, 1, 3, 10, 10, 4, 3, 6, 9],
[ 2, 1, 8, 7, 3, 1, 9, 3, 6, 2],
[ 9, 2, 6, 5, 3, 9, 4, 6, 1, 10]])
Saída desejada:
[[1, 0, 2, 1, 1, 1, 0, 2, 2, 0],
[2, 1, 3, 0, 1, 0, 1, 0, 1, 1],
[0, 3, 0, 2, 3, 1, 0, 1, 0, 0],
[1, 0, 2, 1, 0, 1, 0, 2, 1, 2],
[2, 2, 2, 0, 0, 1, 1, 1, 1, 0],
[1, 1, 1, 1, 1, 2, 0, 0, 2, 1]]

A saída contém 10 colunas representando números de 1 a 10. Os valores são as contagens dos números nas respectivas linhas.
Por exemplo, Cell (0,2) tem o valor 2, o que significa que o número 3 ocorre exatamente 2 vezes na primeira linha.

⚫2- Encontre todos os picos em uma matriz 1D numpy ‘a’. Picos são pontos cercados por valores menores em ambos os lados.
a = np.array([1, 3, 7, 1, 2, 6, 0, 1])
Saída desejada:
array([2, 5])
onde, 2 e 5 são as posições dos valores de pico 7 e 6.

⚫3- Calcule as codificações únicas (variáveis ​​binárias dummy para cada valor único na matriz)

np.random.seed(101)
arr = np.random.randint(1,4, size=6)
print(arr)
array([2, 3, 2, 2, 2, 1])

Saída desejada:
array([[ 0., 1., 0.],
[ 0., 0., 1.],
[ 0., 1., 0.],
[ 0., 1., 0.],
[ 0., 1., 0.],
[ 1., 0., 0.]])